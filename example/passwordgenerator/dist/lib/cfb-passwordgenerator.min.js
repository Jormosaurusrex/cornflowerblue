/*! Cornflower Blue - v0.1.1 - 2020-10-23
* http://www.gaijin.com/cornflowerblue/
* Copyright (c) 2020 Brandon Harris; Licensed MIT */

class PasswordChangeForm{static get DEFAULT_CONFIG(){return{maxlength:30,minlength:5,suggestedlength:8,cannotbe:[],forceconstraints:null,instructions:[TextFactory.get("passwordchanger-form-instructions")],placeholder:null,buttontext:TextFactory.get("change_password"),pwcurrlabel:TextFactory.get("current_password"),pwcurrplaceholder:TextFactory.get("passwordchanger-currentpw-placeholder"),pwcurrhelp:TextFactory.get("passwordchanger-currentpw-help"),pwonelabel:TextFactory.get("new_password"),pwoneplaceholder:null,pwonehelp:null,pwtwolabel:TextFactory.get("confirm_password"),pwtwoplaceholder:null,pwtwohelp:null,badpasswordhook:null}}constructor(t){this.config=Object.assign({},PasswordChangeForm.DEFAULT_CONFIG,t),this.id||(this.id=`pwchange-${CFBUtils.getUniqueKey(5)}`)}runChecks(){let t=!0;if(this.pwone.value!==this.pwtwo.value&&(this.pwone.errors.push(TextArea.get("passwordchanger-error-passwords_must_match")),this.pwone.showMessages(),t=!1),this.cannotbe&&this.cannotbe.length>0)for(let e of this.cannotbe)this.pwone.value===e&&(this.pwone.errors.push(TextArea.get("passwordchanger-error-cannot_be_used_as_pw")),t=!1);return t&&this.badpasswordhook&&"function"==typeof this.badpasswordhook&&(t=this.badpasswordhook(this.pwone)),t&&this.pwone.clearMessages(),t}buildForm(){this.pwcurr=new PasswordInput({id:`${this.id}-pwcurr`,label:this.pwcurrlabel,showpasswordbydefault:!0,required:!0,placeholder:this.pwcurrplaceholder,help:this.pwcurrhelp}),this.pwone=new PasswordInput({id:`${this.id}-pwone`,label:this.pwonelabel,showpasswordbydefault:!0,required:!0,placeholder:this.pwoneplaceholder,help:this.pwonehelp}),this.pwtwo=new PasswordInput({id:`${this.id}-pwtwo`,label:this.pwtwolabel,required:!0,showpasswordbydefault:!0,placeholder:this.pwtwoplaceholder,help:this.pwtwohelp}),this.pwgen=new PasswordGenerator({autofills:[this.pwone,this.pwtwo]}),this.form=new SimpleForm({instructions:{icon:"help-circle",instructions:this.instructions},elements:[new HiddenField({name:this.name}),this.pwcurr,this.pwone,this.pwtwo,this.pwgen],validator:t=>this.runChecks(t),handler:(t,e)=>{e({success:!0,results:[TextFactory.get("passwordchanger-results-changed_successfully")]})},actions:[new ConstructiveButton({text:this.buttontext,hot:!0,submits:!0,disabled:!0})]})}calculatePlaceholder(){return this.placeholder?this.placeholder:this.forceconstraints?TextFactory.get("passwordchanger-placeholder-minlength",this.minlength):this.suggestedlength?TextFactory.get("passwordchanger-placeholder-suggested",this.suggestedlength):void 0}get container(){return this.form.container}get pwonehelp(){if(this.config.pwonehelp)return this.config.pwonehelp}get pwoneplaceholder(){if(this.config.pwoneplaceholder)return this.config.pwoneplaceholder}get pwtwohelp(){if(this.config.pwtwohelp)return this.config.pwtwohelp}get pwtwoplaceholder(){if(this.config.pwtwoplaceholder)return this.config.pwtwoplaceholder}toString(){return CFBUtils.getConfig(this)}get badpasswordhook(){return this.config.badpasswordhook}set badpasswordhook(t){"function"!=typeof t&&console.error("Action provided for badpasswordhook is not a function!"),this.config.badpasswordhook=t}get buttontext(){return this.config.buttontext}set buttontext(t){this.config.buttontext=t}get cannotbe(){return this.config.cannotbe}set cannotbe(t){this.config.cannotbe=t}get forceconstraints(){return this.config.forceconstraints}set forceconstraints(t){this.config.forceconstraints=t}get form(){return this._form||this.buildForm(),this._form}set form(t){this._form=t}get instructions(){return this.config.instructions}set instructions(t){this.config.instructions=t}get maxlength(){return this.config.maxlength}set maxlength(t){this.config.maxlength=t}get minlength(){return this.config.minlength}set minlength(t){this.config.minlength=t}get placeholder(){return this.config.placeholder?this.config.placeholder:this.calculatePlaceholder()}set placeholder(t){this.config.placeholder=t}get pwactual(){return this._pwactual}set pwactual(t){this._pwactual=t}get pwcurr(){return this._pwcurr}set pwcurr(t){this._pwcurr=t}get pwgen(){return this._pwgen}set pwgen(t){this._pwgen=t}get pwone(){return this._pwone}set pwone(t){this._pwone=t}get pwtwo(){return this._pwtwo}set pwtwo(t){this._pwtwo=t}get pwcurrhelp(){return this.config.pwcurrhelp}set pwcurrhelp(t){this.config.pwcurrhelp=t}get pwcurrlabel(){return this.config.pwcurrlabel}set pwcurrlabel(t){this.config.pwcurrlabel=t}get pwcurrplaceholder(){return this.config.pwcurrplaceholder}set pwcurrplaceholder(t){this.config.pwcurrplaceholder=t}get pwonelabel(){return this.config.pwonelabel}set pwonelabel(t){this.config.pwonelabel=t}get pwtwolabel(){return this.config.pwtwolabel}set pwtwolabel(t){this.config.pwtwolabel=t}get suggestedlength(){return this.config.suggestedlength}set suggestedlength(t){this.config.suggestedlength=t}get value(){return this.pwactual.val()}set value(t){this.pwactual.val(t)}}window.PasswordChangeForm=PasswordChangeForm;class PasswordGenerator{static get DEFAULT_CONFIG(){return{id:null,buttontext:TextFactory.get("generate_password"),buttonicon:"refresh",length:15,autofills:[],sets:["lc","uc","num","punc"]}}static get DATASETS(){return{lc:{id:"lc",label:TextFactory.get("lowercase"),set:"a-z",chars:"abcdefghijklmnopqrstuvwxyz"},uc:{id:"uc",label:TextFactory.get("uppercase"),set:"A-Z",chars:"ABCDEFGHIJKLMNOPQRSTUVWXYZ"},num:{id:"num",label:TextFactory.get("numbers"),set:"0-9",chars:"0123456789"},punc:{id:"punc",label:TextFactory.get("punctuation"),set:"#",chars:"![]{}()%&*$#^<>~@|"}}}static getDataSet(t){return PasswordGenerator.DATASETS[t]}static randomPassword(t=PasswordGenerator.DEFAULT_CONFIG.sets,e=15){let s="";for(let e of t)PasswordGenerator.getDataSet(e)&&(s+=PasswordGenerator.getDataSet(e).chars);let o="";for(let t=0;t<e;t++)o+=s.charAt(Math.floor(Math.random()*s.length));return o}constructor(t){this.config=Object.assign({},PasswordGenerator.DEFAULT_CONFIG,t),this.id||(this.id=`pwgen-${CFBUtils.getUniqueKey(5)}`),this.setactuals=[]}generatePassword(){let t=[];if(this.sets&&0!==this.sets.length)for(let e of this.setactuals)e.checked&&t.push(e.value);else t=PasswordGenerator.DEFAULT_CONFIG.sets;let e=PasswordGenerator.randomPassword(t,this.length);if(this.autofills&&this.autofills.length>0){let t;for(let s of this.autofills)s.value=e,s.form&&(t=s.form);t&&t.validate()}}buildContainer(){if(this.container=document.createElement("div"),this.container.classList.add("pwgenerator"),this.datasetblock=document.createElement("ul"),this.datasetblock.classList.add("datasets"),this.datasetblock.setAttribute("aria-hidden","true"),this.sets.length>0)for(let t of this.sets)if(t in PasswordGenerator.DATASETS){let e=PasswordGenerator.getDataSet(t),s=new BooleanToggle({name:`dset-${e.id}`,id:`${this.id}-${e.id}`,value:e.id,label:e.label,checked:!0});this.setactuals.push(s);let o=document.createElement("li");o.appendChild(s.container),this.datasetblock.appendChild(o)}this.button=new SimpleButton({text:this.buttontext,naked:!0,action:t=>{t.preventDefault(),this.generatePassword()}}),this.configbutton=new ButtonMenu({icon:"gear",secondicon:null,shape:"square",naked:!0,stayopen:!0,arialabel:TextFactory.get("configure_generator"),classes:["config"],menu:this.datasetblock});let t=document.createElement("div");t.classList.add("controls"),t.appendChild(this.button.button),t.appendChild(this.configbutton.button),this.container.appendChild(t),this.container.appendChild(this.datasetblock)}toString(){return CFBUtils.getConfig(this)}get autofills(){return this.config.autofills}set autofills(t){this.config.autofills=t}get button(){return this._button}set button(t){this._button=t}get configbutton(){return this._configbutton}set configbutton(t){this._configbutton=t}get buttonicon(){return this.config.buttonicon}set buttonicon(t){this.config.buttonicon=t}get buttontext(){return this.config.buttontext}set buttontext(t){this.config.buttontext=t}get container(){return this._container||this.buildContainer(),this._container}set container(t){this._container=t}get datasetblock(){return this._datasetblock}set datasetblock(t){this._datasetblock=t}get id(){return this.config.id}set id(t){this.config.id=t}get length(){return this.config.length}set length(t){this.config.length=t}get sets(){return this.config.sets}set sets(t){this.config.sets=t}get setactuals(){return this._setactuals}set setactuals(t){this._setactuals=t}}window.PasswordGenerator=PasswordGenerator;